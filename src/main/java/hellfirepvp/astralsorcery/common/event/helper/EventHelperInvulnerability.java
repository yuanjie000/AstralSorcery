/*******************************************************************************
 * HellFirePvP / Astral Sorcery 2020
 *
 *  All rights reserved.
 *  The source code is available on github: https://github.com/HellFirePvP/AstralSorcery
 *  For further details, see the License file there.
 ******************************************************************************/

package hellfirepvp.astralsorcery.common.event.helper;

import hellfirepvp.astralsorcery.common.util.tick.TimeoutList;
import hellfirepvp.observerlib.common.util.tick.ITickHandler;
import net.minecraft.entity.LivingEntity;
import net.minecraft.entity.MobEntity;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraftforge.event.TickEvent;
import net.minecraftforge.event.entity.living.LivingHurtEvent;
import net.minecraftforge.event.entity.living.LivingSetAttackTargetEvent;
import net.minecraftforge.event.entity.player.PlayerEvent;
import net.minecraftforge.eventbus.api.EventPriority;
import net.minecraftforge.eventbus.api.IEventBus;

import java.util.function.Consumer;

/**
 * This class is part of the Astral Sorcery Mod
 * The complete source code for this mod can be found on github.
 * Class: EventHelperInvulnerability
 * Created by HellFirePvP
 * Date: 12.01.2020 / 16:11
 */
public class EventHelperInvulnerability {

    private static TimeoutList<PlayerEntity> invulnerabilityCooldown = new TimeoutList<>(p -> p.setInvulnerable(false), TickEvent.Type.SERVER);

    public static void makeInvulnerable(PlayerEntity player) {
        player.setInvulnerable(true);
        invulnerabilityCooldown.add(10, player);
    }

    public static void clearServer() {
        invulnerabilityCooldown.clear();
    }

    public static void attachTickListener(Consumer<ITickHandler> registrar) {
        registrar.accept(invulnerabilityCooldown);
    }

    public static void attachListeners(IEventBus eventBus) {
        eventBus.addListener(EventHelperInvulnerability::onDisconnect);
        eventBus.addListener(EventHelperInvulnerability::onTarget);
        eventBus.addListener(EventPriority.LOW, EventHelperInvulnerability::onHurt);
    }

    private static void onDisconnect(PlayerEvent.PlayerLoggedOutEvent event) {
        invulnerabilityCooldown.remove(event.getPlayer());
    }

    private static void onTarget(LivingSetAttackTargetEvent event) {
        LivingEntity target = event.getTarget();
        if (target != null && target.isAlive() && target instanceof PlayerEntity) {
            PlayerEntity targetedPlayer = (PlayerEntity) target;
            if (invulnerabilityCooldown.contains(targetedPlayer)) {
                event.getEntityLiving().setRevengeTarget(null);
                if (event.getEntityLiving() instanceof MobEntity) {
                    ((MobEntity) event.getEntityLiving()).setAttackTarget(null);
                }
            }
        }
    }

    private static void onHurt(LivingHurtEvent event) {
        LivingEntity entity = event.getEntityLiving();
        if (entity == null) {
            return;
        }
        if (entity instanceof PlayerEntity && invulnerabilityCooldown.contains((PlayerEntity) entity)) {
            event.setCanceled(true);
        }
    }
}
